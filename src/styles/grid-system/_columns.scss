/// Generates Grid System col size selectors
/// @param {string} $breakpoint-key [''] - the breakpoint name
/// @param {number} $i - the col index
@mixin col-size-selector($breakpoint-key: '', $i: 0) {
  $prefix: '';

  @if $breakpoint-key != '' {
    $prefix: '#{$breakpoint-key}-';
  }

  :where(col, [col]) {
    &[size~='#{$prefix}#{$i}'] {
      grid-column-end: span $i;
    }
  }
}

/// Generates Grid System col size media query
/// @param {string} $breakpoint-key [''] - the breakpoint name
/// @param {number} $i - the col index
/// @param {size | length} $min-vw - min viewport width to enable the col size media query
@mixin col-size($breakpoint-key: '', $i, $min-vw) {
  @if $breakpoint-key == '' {
    @include col-size-selector($breakpoint-key, $i);
  } @else {
    @include helpers.media($media-type: screen, $min-width: $min-vw) {
      @include col-size-selector($breakpoint-key, $i);
    }
  }
}

/// Generates Grid System col size selectors
/// @param {string} $breakpoint-key [''] - the breakpoint name
/// @param {number} $i - the col index
@mixin col-offset-selector($breakpoint-key: '', $i: 0) {
  $prefix: '';

  @if $breakpoint-key != '' {
    $prefix: '#{$breakpoint-key}-';
  }

  :where(col, [col]) {
    &[offset~='#{$prefix}#{$i}'] {
      grid-column-start: $i + 1;
    }
  }
}

/// Generates Grid System col offset selectors
/// @param {string} $breakpoint-key [''] - the breakpoint name
/// @param {number} $i - the col index
/// @param {size | length} $min-vw - min viewport width to enable the col offset selector
/// @param {size | length} $max-vw - max viewport width to enable the col offset selector
@mixin col-offset($breakpoint-key: '', $i, $min-vw, $max-vw) {
  @if $breakpoint-key == '' {
    @include col-offset-selector($breakpoint-key, $i);
  } @else {
    @include helpers.media($media-type: screen, $min-width: $min-vw, $max-width: $max-vw) {
      @include col-offset-selector($breakpoint-key, $i);
    }
  }
}

/// Generates Grid System col size selectors (e.g. col-md-1)
/// @param {number} $cols [$dout-gs-cols] - cols number
/// @param {object} $breakpoint [null] - an object containing the breakpoint settings
/// @param {string} $breakpoint-key [''] - the breakpoint name
@mixin col-dimensions($cols: $dout-gs-cols, $breakpoint: null, $breakpoint-key: '') {
  $min-vw: null;
  $max-vw: null;

  @if $breakpoint != null {
    $min-vw: map.get($breakpoint, min-vw);
    $max-vw: map.get($breakpoint, max-vw);
  }

  @for $i from 1 through $cols {
    @include col-size($breakpoint-key, $i, $min-vw);
    @include col-offset($breakpoint-key, $i, $min-vw, $max-vw);
  }
}

/// Generates Grid System cols breakpoints selectors
/// @param {number} $cols [$dout-gs-cols] - cols number
/// @param {object} $breakpoints [$dout-gs-breakpoints] - definition of all the breakpoints
@mixin cols-breakpoints($cols: $dout-gs-cols, $breakpoints: $dout-gs-breakpoints) {
  @include col-dimensions($cols);

  @each $breakpoint-key, $breakpoint in $breakpoints {
    @include col-dimensions($cols, $breakpoint, $breakpoint-key);
  }
}

/// Generates Grid System cols selectors
/// @param {number} $cols [$dout-gs-cols] - cols number
/// @param {object} $breakpoints [$dout-gs-breakpoints] - definition of all the breakpoints
@mixin cols($cols: $dout-gs-cols, $breakpoints: $dout-gs-breakpoints) {
  :where(col, [col]) {
    display: flex;
    flex-flow: column nowrap;
    grid-column: auto / span var(--dout--gs--cols);

    max-width: var(--dout--gs--container--width);
  }

  @include cols-breakpoints($cols, $breakpoints);
}
